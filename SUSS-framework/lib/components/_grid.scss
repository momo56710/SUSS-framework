@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes
@mixin  container {
  width: 100%;
  margin: 0 auto;
  box-sizing: border-box;
}
.container{
  @include container;
  max-width : 1200px;
  padding: 0 20px;
}
.container-fluid{
  @include container;
}
.row {
  display: flex;
  flex-flow: row wrap;
}

@each $k, $v in $grid-gaps {
  .gap-#{$k} > * {
    padding: $v;
  }
  .gap-#{$k}{
    margin-left: -$v;
    margin-right: -$v;
  }
}

//justify content classes
@each $v in $layout-values {
  .justify-#{$v} {
    justify-content: $v;
  }
}

// col classes
@for $i from 1 through $grid-columns {
  .col-#{$i} {
    box-sizing: border-box;
    flex-grow: 0;
    width: math.div($i * 100%, $grid-columns);
  }
}


@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
